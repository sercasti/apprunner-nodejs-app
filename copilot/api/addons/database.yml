# You can use any of these parameters to create conditions or mappings in your template.
Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.

Resources:
  
  AuroraDBCluster:
    Metadata: 
      'aws:copilot:description': 'The Aurora database cluster'
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Engine: aurora-postgresql
      EngineVersion: '13.4'
      Port: '5432'
      DatabaseName: 'postgres'
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref AuroraMasterSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref AuroraMasterSecret, ':SecretString:password}}' ]]
      VpcSecurityGroupIds:
        - !Ref ClusterSecurityGroup  
      DBSubnetGroupName: !Ref DBSubnetGroup

  AuroraDBFirstInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.r6g.xlarge
      DBClusterIdentifier: !Ref AuroraDBCluster  
      Engine: aurora-postgresql
      PubliclyAccessible: true
      EnablePerformanceInsights: true
  
  ClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable Web Ports Ingress
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      VpcId: { 'Fn::ImportValue': !Sub '${App}-${Env}-VpcId' }

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Ref 'AWS::StackName'
      SubnetIds: !Split [ ',', { 'Fn::ImportValue': !Sub '${App}-${Env}-PublicSubnets' } ]

## Database credentials generated via Secrets manager
  AuroraMasterSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your DB credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join [ '/', [ !Ref App, !Ref Env, !Ref Name, 'aurora-pg' ] ]
      Description: !Join [ '', [ 'Aurora PostgreSQL Master User Secret ', 'for CloudFormation Stack ', !Ref 'AWS::StackName' ] ]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludeCharacters: '"@/\'
        PasswordLength: 16

  SecretAuroraClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AuroraMasterSecret
      TargetId: !Ref AuroraDBCluster
      TargetType: AWS::RDS::DBCluster

## RDS Proxy instance
  DBProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: AuroraRDSProxy
      EngineFamily: POSTGRESQL
      RoleArn: !GetAtt ProxyRole.Arn
      Auth:
        - {AuthScheme: SECRETS, SecretArn: !Ref AuroraMasterSecret, IAMAuth: DISABLED}
      VpcSubnetIds: !Split [ ',', { 'Fn::ImportValue': !Sub '${App}-${Env}-PublicSubnets' } ]
      VpcSecurityGroupIds: 
        - !Ref ClusterSecurityGroup
    DependsOn: AuroraMasterSecret

  ProxyTargetGroup: 
    Type: AWS::RDS::DBProxyTargetGroup
    Properties:
      DBProxyName: AuroraRDSProxy
      TargetGroupName: default
      DBClusterIdentifiers: 
        - !Ref AuroraDBCluster
    DependsOn: 
        - DBProxy
        - AuroraDBFirstInstance

## IAM Role for RDS Proxy to read the DB password from Secrets Manager
  ProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sample-proxy-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "rds.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: RdsProxyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                Resource:
                  - !Ref AuroraMasterSecret
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource: 
                       - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub 'secretsmanager.${AWS::Region}.amazonaws.com'
    DependsOn: AuroraMasterSecret

Outputs:
  dbuser: # injected as DBUSER environment variable by Copilot.
    Description: 'The secret user.'
    Value: !Join ['', ['{{resolve:secretsmanager:', !Ref AuroraMasterSecret, ':SecretString:username}}' ]]

  dbpwd: # injected as DBPWD environment variable by Copilot.
    Description: 'The secret password.'
    Value: !Join ['', ['{{resolve:secretsmanager:', !Ref AuroraMasterSecret, ':SecretString:password}}' ]]

  dbaurora: # injected as DBAURORA environment variable by Copilot.
    Description: 'The connection endpoint for the DB cluster.'
    Value: !GetAtt 'AuroraDBCluster.Endpoint.Address'

  dbhost: # injected as DBHOST environment variable by Copilot.
    Description: 'The proxy connection pool endpoint.'
    Value: !GetAtt 'DBProxy.Endpoint'
  